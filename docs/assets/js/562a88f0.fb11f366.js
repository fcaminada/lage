"use strict";(self.webpackChunk_lage_run_docs=self.webpackChunk_lage_run_docs||[]).push([[287],{5680:(e,a,n)=>{n.d(a,{xA:()=>c,yg:()=>y});var t=n(6540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=t.createContext({}),p=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},c=function(e){var a=p(e.components);return t.createElement(l.Provider,{value:a},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,y=d["".concat(l,".").concat(m)]||d[m]||g[m]||i;return n?t.createElement(y,o(o({ref:a},c),{},{components:n})):t.createElement(y,o({ref:a},c))}));function y(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9832:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var t=n(8168),r=(n(6540),n(5680));const i={sidebar_position:3,title:"3. Scoping by packages"},o=void 0,s={unversionedId:"Tutorial/scopes",id:"Tutorial/scopes",title:"3. Scoping by packages",description:"By examining the target graph, lage can understand which targets are not affected by a particular change being proposed in a pull request. In that case lage has a few CLI arguments controlling which target to run.",source:"@site/docs/Tutorial/scopes.md",sourceDirName:"Tutorial",slug:"/Tutorial/scopes",permalink:"/lage/docs/Tutorial/scopes",draft:!1,editUrl:"https://github.com/microsoft/lage/edit/master/docs/docs/Tutorial/scopes.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"3. Scoping by packages"},sidebar:"defaultSidebar",previous:{title:"2. Pipeline",permalink:"/lage/docs/Tutorial/pipeline"},next:{title:"4. Local Caching",permalink:"/lage/docs/Tutorial/cache"}},l={},p=[{value:"Scoped builds with all its dependents",id:"scoped-builds-with-all-its-dependents",level:2},{value:"Scoped builds with no dependent &amp; their dependencies",id:"scoped-builds-with-no-dependent--their-dependencies",level:2}],c={toc:p},d="wrapper";function g(e){let{components:a,...n}=e;return(0,r.yg)(d,(0,t.A)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"By examining the ",(0,r.yg)("a",{parentName:"p",href:"/lage/docs/Introduction#how-does-lage-schedule-tasks"},"target graph"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"lage")," can understand which targets are not affected by a particular change being proposed in a pull request. In that case ",(0,r.yg)("inlineCode",{parentName:"p"},"lage")," has a few CLI arguments controlling which target to run."),(0,r.yg)("admonition",{type:"info"},(0,r.yg)("p",{parentName:"admonition"},"A target is a unit of execution in the ",(0,r.yg)("inlineCode",{parentName:"p"},"lage")," graph. Think of it as a tuple of ",(0,r.yg)("inlineCode",{parentName:"p"},"[package, task]"),".")),(0,r.yg)("h2",{id:"scoped-builds-with-all-its-dependents"},"Scoped builds with all its dependents"),(0,r.yg)("p",null,"By default, ",(0,r.yg)("inlineCode",{parentName:"p"},"lage")," runs tasks on all affected packages within a scope. Packages that changed will affect downstream consumers of the scope. In this example, ",(0,r.yg)("inlineCode",{parentName:"p"},"--scope")," is set as ",(0,r.yg)("inlineCode",{parentName:"p"},"common-lib")," - all of its transitive dependents (consumers of the ",(0,r.yg)("inlineCode",{parentName:"p"},"common-lib"),' package) will also have their "build" script be called.'),(0,r.yg)("div",{className:"shiki-twoslash-fragment"},(0,r.yg)("pre",{parentName:"div",className:"shiki light-plus",style:{backgroundColor:"#FFFFFF",color:"#000000"}},(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"undefined"}},"lage build --scope common-lib"))))),(0,r.yg)("pre",{parentName:"div",className:"shiki nord",style:{backgroundColor:"#2e3440ff",color:"#d8dee9ff"}},(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"undefined"}},"lage build --scope common-lib")))))),(0,r.yg)("p",null,"You can use wild card character: ",(0,r.yg)("inlineCode",{parentName:"p"},"*"),". This is particularly helpful when packages are named by group or by scope. For example, ",(0,r.yg)("inlineCode",{parentName:"p"},"components-*")," would match ",(0,r.yg)("inlineCode",{parentName:"p"},"components-foo")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"components-bar")," packages."),(0,r.yg)("div",{className:"shiki-twoslash-fragment"},(0,r.yg)("pre",{parentName:"div",className:"shiki light-plus",style:{backgroundColor:"#FFFFFF",color:"#000000"}},(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"undefined"}},"lage build --scope components-*"))))),(0,r.yg)("pre",{parentName:"div",className:"shiki nord",style:{backgroundColor:"#2e3440ff",color:"#d8dee9ff"}},(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"undefined"}},"lage build --scope components-*")))))),(0,r.yg)("admonition",{type:"note"},(0,r.yg)("p",{parentName:"admonition"},"npm has a concept of ",(0,r.yg)("a",{parentName:"p",href:"https://docs.npmjs.com/cli/v8/using-npm/scope"},"@-scoped packages")," in the package names. This describes a kind of grouping by an organization as defined by the npm spec. It is a ",(0,r.yg)("em",{parentName:"p"},"different")," concept than the ",(0,r.yg)("inlineCode",{parentName:"p"},"lage")," scope.")),(0,r.yg)("p",null,"Speaking of ",(0,r.yg)("inlineCode",{parentName:"p"},"@-scopes"),". We found that typing the ",(0,r.yg)("inlineCode",{parentName:"p"},"@-scopes")," when specifying the ",(0,r.yg)("inlineCode",{parentName:"p"},"lage")," scoped runs is a kind of ",(0,r.yg)("a",{parentName:"p",href:"https://sre.google/sre-book/eliminating-toil/"},"toil")," as a command line argument. So, ",(0,r.yg)("inlineCode",{parentName:"p"},"lage")," will accept bare package names like this:"),(0,r.yg)("div",{className:"shiki-twoslash-fragment"},(0,r.yg)("pre",{parentName:"div",className:"shiki light-plus",style:{backgroundColor:"#FFFFFF",color:"#000000"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"shell"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#008000"}},"# Given that there is a package named: @myorg/wonderful-library, we can match it this way:")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#000000"}},"lage build --scope wonderful-library"))))),(0,r.yg)("pre",{parentName:"div",className:"shiki nord",style:{backgroundColor:"#2e3440ff",color:"#d8dee9ff"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"shell"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#616E88"}},"# Given that there is a package named: @myorg/wonderful-library, we can match it this way:")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#D8DEE9FF"}},"lage build --scope wonderful-library")))))),(0,r.yg)("h2",{id:"scoped-builds-with-no-dependent--their-dependencies"},"Scoped builds with no dependent & their dependencies"),(0,r.yg)("p",null,"If you simply want to run all targets up to a certain scope, this is how you can achieve it:"),(0,r.yg)("div",{className:"shiki-twoslash-fragment"},(0,r.yg)("pre",{parentName:"div",className:"shiki light-plus",style:{backgroundColor:"#FFFFFF",color:"#000000"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"shell"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#000000"}},"lage build --scope build-tools --no-dependents"))))),(0,r.yg)("pre",{parentName:"div",className:"shiki nord",style:{backgroundColor:"#2e3440ff",color:"#d8dee9ff"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"shell"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#D8DEE9FF"}},"lage build --scope build-tools --no-dependents")))))),(0,r.yg)("p",null,"In fact, this is so useful that ",(0,r.yg)("inlineCode",{parentName:"p"},"lage")," has a special syntactic sugar for it:"),(0,r.yg)("div",{className:"shiki-twoslash-fragment"},(0,r.yg)("pre",{parentName:"div",className:"shiki light-plus",style:{backgroundColor:"#FFFFFF",color:"#000000"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"shell"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#008000"}},"## syntactic sugar for --scope build-tools --no-dependents")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#000000"}},"lage build --to build-tools"))))),(0,r.yg)("pre",{parentName:"div",className:"shiki nord",style:{backgroundColor:"#2e3440ff",color:"#d8dee9ff"}},(0,r.yg)("div",{parentName:"pre",className:"language-id"},"shell"),(0,r.yg)("div",{parentName:"pre",className:"code-container"},(0,r.yg)("code",{parentName:"div"},(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#616E88"}},"## syntactic sugar for --scope build-tools --no-dependents")),(0,r.yg)("div",{parentName:"code",className:"line"},(0,r.yg)("span",{parentName:"div",style:{color:"#D8DEE9FF"}},"lage build --to build-tools")))))))}g.isMDXComponent=!0}}]);