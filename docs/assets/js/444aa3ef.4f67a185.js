"use strict";(self.webpackChunk_lage_run_docs=self.webpackChunk_lage_run_docs||[]).push([[11],{5680:(e,t,r)=>{r.d(t,{xA:()=>u,yg:()=>y});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(r),g=a,y=c["".concat(p,".").concat(g)]||c[g]||d[g]||o;return r?n.createElement(y,i(i({ref:t},u),{},{components:r})):n.createElement(y,i({ref:t},u))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},5591:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(8168),a=(r(6540),r(5680));const o={title:"Introducing Lage"},i=void 0,l={unversionedId:"Tutorial/README",id:"Tutorial/README",title:"Introducing Lage",description:"Overview",source:"@site/docs/Tutorial/README.md",sourceDirName:"Tutorial",slug:"/Tutorial/",permalink:"/lage/docs/Tutorial/",draft:!1,editUrl:"https://github.com/microsoft/lage/edit/master/docs/docs/Tutorial/README.md",tags:[],version:"current",frontMatter:{title:"Introducing Lage"},sidebar:"defaultSidebar",previous:{title:"Quick Start",permalink:"/lage/docs/quick-start"},next:{title:"1. Installation",permalink:"/lage/docs/Tutorial/installation"}},p={},s=[{value:"Overview",id:"overview",level:2}],u={toc:s},c="wrapper";function d(e){let{components:t,...r}=e;return(0,a.yg)(c,(0,n.A)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"overview"},"Overview"),(0,a.yg)("p",null,"Your JS repo has gotten large enough that you have turned to using a tool to help you manage multiple packages inside a repository. That's great! However, you realized quickly that the tasks defined inside the workspace have to be run in package dependency order."),(0,a.yg)("p",null,"Lerna, Rush, wsrun and even pnpm will provide a simple way for you to run npm scripts to be run in a topological order. However, these tools will force you to run your tasks by script name one at a time. For example, all the ",(0,a.yg)("inlineCode",{parentName:"p"},"build")," scripts will have to run first. Then all the ",(0,a.yg)("inlineCode",{parentName:"p"},"test")," scripts run in the topological order."),(0,a.yg)("p",null,"This usually means that there are wasted CPU cycles in between ",(0,a.yg)("inlineCode",{parentName:"p"},"build")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"test"),". We can achieve better pipelining the npm scripts if we had a way to say that ",(0,a.yg)("inlineCode",{parentName:"p"},"test")," can run as soon as ",(0,a.yg)("inlineCode",{parentName:"p"},"build")," are done for the package."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"lage"),' (Norwegian for "make", pronounced law-geh) solves this by providing a terse pipelining syntax. It has features specifically address large monorepos with high number of packages:'),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"package and task scopes"),(0,a.yg)("li",{parentName:"ul"},"output caching"),(0,a.yg)("li",{parentName:"ul"},"sound scheduling with package task pipeline"),(0,a.yg)("li",{parentName:"ul"},"prioritization")))}d.isMDXComponent=!0}}]);